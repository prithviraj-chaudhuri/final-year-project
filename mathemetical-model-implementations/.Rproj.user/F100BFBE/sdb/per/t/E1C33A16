{
    "contents" : "\n#This Program is for feature selection\n#Author - Prithviraj Chaudhuri\n\n#Loading Libraries\n#library(\"entropy\")\n\n\n#Function to read Data\nreadData <- function(NMIfilename, isHeader){\n  data <- read.table(NMIfilename, header=isHeader)\n  return(data)\n}\n\n\n#Function to get MI from CSV Data\n#getNMI <- funtion(CSVDataMatrix){\n#  NMIDataMatrix <- makemim(CSVDataMatrix)\n#  return(NMIDataMatrix)\n#}\n\n\n#function to scale the CSV Data\nscaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){\n  \n  minScaledVal <- 0\n  maxScaledVal <- 1\n  minVal <- 0\n  maxVal <- 0\n  scaledCsvDataMatrix <- matrix( c(0), nrow = numOfSamples, ncol = numOfNodes) \n  \n  for(j in 1:numOfNodes){\n    \n    minVal <- sapply(CSVDataMatrix[j], min, na.rm = TRUE)\n    maxVal <- sapply(CSVDataMatrix[j], max, na.rm = TRUE)\n    \n    for(i in 1:numOfSamples){\n      scaledCsvDataMatrix[i,j] <- ((CSVDataMatrix[i,j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal\n    }\n  }\n  return(scaledCsvDataMatrix)\n}\n\n#Funtion to get mean of a vector\ngetMean <- function(scaledCsvDataMatrix, col, numOfSamples){\n  \n  sum <- 0\n  for(i in 1:numOfSamples){\n    sum <- sum + scaledCsvDataMatrix[i,col]\n  }\n  mean <- sum/numOfSamples\n  return(mean)\n}\n\n\n#Function to calculate the variance of the scaled matrix\ngetVariance <- function(scaledCsvDataMatrix, numOfNodes, numOfSamples){\n  \n  varArray <- matrix( c(0), nrow = 1, ncol = numOfNodes) \n  \n  for(j in 1:numOfNodes){\n    sum <- 0\n    for(i in 1:numOfSamples){\n      sum <- sum + ((scaledCsvDataMatrix[i,j]-getMean(scaledCsvDataMatrix, j, numOfSamples))*(scaledCsvDataMatrix[i,j]-getMean(scaledCsvDataMatrix, j, numOfSamples)))\n    }\n    varArray[j] <- sum/numOfSamples\n  }\n  return(varArray)\n}\n\n\n#Function to compute the density variation sequences\ncomputeDensityVarSeq <- function(NMIDataMatrix, scaledCsvDataMatrix, maximizer, time, dVal, numOfNodes){\n  \n  isSelected <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  isCurrentlyDiscarded <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  isShortlisted <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  isOptimal <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  inducedDegree <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  rank <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  clusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  oldClusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )\n  \n  currentDensity <- computeDensity(NMIDataMatrix, isSelected)\n  optimalDensity <- currentDensity\n  \n  sprintf(\"Optimal Density = %f\", optimalDensity)\n  \n  while(1){\n    \n    nodeCount <- 0\n    \n    for(i in 1:numOfNodes){\n      if(isSelected[i]==0){\n        nodeCount++\n      }\n      rank[i]= <- 999999\n    }\n   \n    if(nodeCount==0 || nodeCount <= K){\n      break\n    }\n    \n    for(i in 1:numOfNodes){\n      if (isSelected[i] == 0){\n        inducedDegree[i] <- computeInducedDegree (NMIDataMatrix, isSelected, i)\n      }else{\n        inducedDegree[i] <- 0\n      }  \n    }\n    \n    noShortListed <- 0\n    for(i in 1:numOfNodes){\n      if(isSelected[i] == 0){\n        if(inducedDegree[i] >= 2*optimalDensity){\n          isShortListed[i] <- 1\n          noShortListed++\n        }else{\n          isShortListed[i] <- 0\n        }\n      }else{\n        isShortListed[i] <-0\n      }\n    }\n    \n    if(noShortListed > 0){\n      sprintf(\"There is %d shortlisted Candidates \", noShortListed)\n    }\n    \n    rankLimit <- 1\n    \n    sprintf(\"The rank Limit is %d \", rankLimit)\n    \n    if(rankLimit > noShortListed){\n      rankLimit <- 0.5*noShortListed\n    }\n      \n    if(noShortListed == 1){\n      rankLimit <- 1\n    }else if(noShortListed == 0){\n      break;\n    }\n    \n    computeRanking(inducedDegree, isShortListed, rank)\n    \n    for(i in 1:numOfNodes){\n      isCurrentlyDiscarded[i] <- 0\n      if(isShortListed[i] == 1){\n        if(rank[i] < rankLimit){\n          sprintf(\"Second rankLimit is %d\", rankLimit)\n          isSelected[i] <- 1\n          isCurrentlyDiscarded[i] <- 1\n        }\n      }\n    }\n    \n    \n    \n  }\n}\n\n\n\n#Exectution of the code\n\n#reading the data\nNMIDataMatrix <- readData(\"C:\\\\Users\\\\prithviraj\\\\Desktop\\\\final-year-project\\\\test-data\\\\test.mi\", FALSE)\nCSVDataMatrix <- readData(\"C:\\\\Users\\\\prithviraj\\\\Desktop\\\\final-year-project\\\\test-data\\\\test.feature\", TRUE)\n\n#creating the MI\n#NMIDataMatrix <- getNMI(CSVDataMatrix)\n\n#setting number of nodes || features\nnumOfNodes <- ncol(CSVDataMatrix)\nnumOfSamples <- nrow(CSVDataMatrix)\n\n#scaled csv data matrix\nscaledCsvDataMatrix <- scaleing(CSVDataMatrix, numOfNodes, numOfSamples)\n\n#calculating the variance of each of the feature vectors\nvarArray <- getVariance(scaledCsvDataMatrix, numOfNodes, numOfSamples)\n",
    "created" : 1441174410732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3790467946",
    "id" : "E1C33A16",
    "lastKnownWriteTime" : 1441336593,
    "path" : "C:/Users/prithviraj/Desktop/final-year-project/mathemetical-model-implementations/feature-reduction-algo.R",
    "project_path" : "feature-reduction-algo.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}