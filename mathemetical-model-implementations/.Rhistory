currentDensity <- computeDensity(NMIDataMatrix, isSelected)
optimalDensity <- currentDensity
clusterLoop <- 0
optimalNodeCount <- 0
print(paste("Optimal Density = ", optimalDensity))
while(1){
nodeCount <- 0
for(i in 1:numOfNodes){
if(isSelected[i]==0){
nodeCount <- nodeCount + 1
}
rank[i] <- 9999
}
if(nodeCount==0 || nodeCount <= K){
break
}
# for(i in 1:numOfNodes){
#  if (isSelected[i] == 0){
#   inducedDegree[i] <- computeInducedDegree (NMIDataMatrix, isSelected, i)
#  }else{
#    inducedDegree[i] <- 0
#  }
#}
numInducedNodes <- 1
sumDegreeWeights <- 0
for(i in 1:numOfNodes){
if (isSelected[i] == 0){
sumDegreeWeights <- 0
for(j in 1:numOfNodes){
if(isSelected[j] == 0 && i!=j && NMIDataMatrix[i,j]<=1.00){
sumDegreeWeights <- sumDegreeWeights + NMIDataMatrix[i,j]
numInducedNodes <- numInducedNodes+1
print(paste("sum degree weights = ", sumDegreeWeights))
}
}
inducedDegree[i] <- sumDegreeWeights
}else{
print(0)
inducedDegree[i] <- 0
}
}
noShortListed <- 0
for(i in 1:numOfNodes){
if(isSelected[i] == 0){
if(inducedDegree[i] >= 2*optimalDensity){
isShortListed[i] <- 1
noShortListed <- noShortListed + 1
}else{
isShortListed[i] <- 0
}
}else{
isShortListed[i] <-0
}
}
if(noShortListed > 0){
print(paste("There is ",noShortListed," shortlisted Candidates " ))
}
rankLimit <- 1
print(paste("The rank Limit is %d ", rankLimit))
if(rankLimit > noShortListed){
rankLimit <- 0.5*noShortListed
}
if(noShortListed == 1){
rankLimit <- 1
}else if(noShortListed == 0){
break
}
rank <- computeRanking(inducedDegree, isShortListed, numOfNodes)
for(i in 1:numOfNodes){
isCurrentlyDiscarded[i] <- 0
if(isShortListed[i] == 1){
print("Short Listed")
if(rank[i] < rankLimit){
print(paste("Second rankLimit is ", rankLimit))
isSelected[i] <- 1
isCurrentlyDiscarded[i] <- 1
}
}
}
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
print(paste("Current Density is ", currentDensity))
for(i in 1:numOfNodes){
if(isSelected[i] == 1 && isCurrentlyDiscarded[i] == 0){
noNodes <- 0
sumWeight <- 0
isSelected[i] <- 0
for(j in 1:numOfNodes){
if(isSelected[j]==0 && j!=i && (NMIDataMatrix[i,j]<=1.00)){
noNodes <- noNodes + 1
sumWeight <- sumWeight + NMIDataMatrix[i,j]
}
}
density <- (currentDensity*noNodes+sumWeight)/(noNodes+1)
if(density < currentDensity){
print(paste("One node with id ",i+1," is being read"))
currentDensity <- density
}else{
isSelected[i] <- 1
}
}
}
if(currentDensity <= optimalDensity){
optimalDensity <- currentDensity
optimalNodeCount <- 0
for(i in 1:numOfNodes){
if(isOptimal[i] == 1){
optimalNodeCount <- optimalNodeCount + 1
print(i+1)
}
}
print("\n")
}
print(paste("\nOptimal Node Count is ", optimalNodeCount))
print(paste("\nOptimal Density is ", optimalDensity))
if(optimalNodeCount==K)
break
}
View(inducedDegree)
View(inducedDegree)
View(inducedDegree)
View(inducedDegree)
View(inducedDegree)
View(inducedDegree)
?
}
K <- 6 #need to know what this means
numOfNodes <- ncol(scaledCsvDataMatrix)
numOfSamples <- nrow(scaledCsvDataMatrix)
isSelected <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isCurrentlyDiscarded <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isShortListed <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isOptimal <- matrix( c(0), nrow = 1, ncol = numOfNodes )
inducedDegree <- matrix( c(1), nrow = 1, ncol = numOfNodes )
rank <- matrix( c(0), nrow = 1, ncol = numOfNodes )
clusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
oldClusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
optimalDensity <- currentDensity
clusterLoop <- 0
optimalNodeCount <- 0
print(paste("Optimal Density = ", optimalDensity))
while(1){
nodeCount <- 0
for(i in 1:numOfNodes){
if(isSelected[i]==0){
nodeCount <- nodeCount + 1
}
rank[i] <- 9999
}
if(nodeCount==0 || nodeCount <= K){
break
}
# for(i in 1:numOfNodes){
#  if (isSelected[i] == 0){
#   inducedDegree[i] <- computeInducedDegree (NMIDataMatrix, isSelected, i)
#  }else{
#    inducedDegree[i] <- 0
#  }
#}
numInducedNodes <- 1
sumDegreeWeights <- 0
for(i in 1:numOfNodes){
if (isSelected[i] == 0){
sumDegreeWeights <- 0
for(j in 1:numOfNodes){
if(isSelected[j] == 0 && i!=j && NMIDataMatrix[i,j]<=1.00){
sumDegreeWeights <- sumDegreeWeights + NMIDataMatrix[i,j]
numInducedNodes <- numInducedNodes+1
print(paste("sum degree weights = ", sumDegreeWeights))
}
}
inducedDegree[i] <- sumDegreeWeights
}else{
print(0)
inducedDegree[i] <- 0
}
}
noShortListed <- 0
for(i in 1:numOfNodes){
if(isSelected[i] == 0){
if(inducedDegree[i] >= 2*optimalDensity){
isShortListed[i] <- 1
noShortListed <- noShortListed + 1
}else{
isShortListed[i] <- 0
}
}else{
isShortListed[i] <-0
}
}
if(noShortListed > 0){
print(paste("There is ",noShortListed," shortlisted Candidates " ))
}
rankLimit <- 1
print(paste("The rank Limit is %d ", rankLimit))
if(rankLimit > noShortListed){
rankLimit <- 0.5*noShortListed
}
if(noShortListed == 1){
rankLimit <- 1
}else if(noShortListed == 0){
break
}
rank <- computeRanking(inducedDegree, isShortListed, numOfNodes)
for(i in 1:numOfNodes){
isCurrentlyDiscarded[i] <- 0
if(isShortListed[i] == 1){
print("Short Listed")
if(rank[i] < rankLimit){
print(paste("Second rankLimit is ", rankLimit))
isSelected[i] <- 1
isCurrentlyDiscarded[i] <- 1
}
}
}
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
print(paste("Current Density is ", currentDensity))
for(i in 1:numOfNodes){
if(isSelected[i] == 1 && isCurrentlyDiscarded[i] == 0){
noNodes <- 0
sumWeight <- 0
isSelected[i] <- 0
for(j in 1:numOfNodes){
if(isSelected[j]==0 && j!=i && (NMIDataMatrix[i,j]<=1.00)){
noNodes <- noNodes + 1
sumWeight <- sumWeight + NMIDataMatrix[i,j]
}
}
density <- (currentDensity*noNodes+sumWeight)/(noNodes+1)
if(density < currentDensity){
print(paste("One node with id ",i+1," is being read"))
currentDensity <- density
}else{
isSelected[i] <- 1
}
}
}
if(currentDensity <= optimalDensity){
optimalDensity <- currentDensity
optimalNodeCount <- 0
for(i in 1:numOfNodes){
if(isOptimal[i] == 1){
optimalNodeCount <- optimalNodeCount + 1
print(i+1)
}
}
print("\n")
}
print(paste("\nOptimal Node Count is ", optimalNodeCount))
print(paste("\nOptimal Density is ", optimalDensity))
if(optimalNodeCount==K)
break
}
View(inducedDegree)
K <- 6 #need to know what this means
numOfNodes <- ncol(scaledCsvDataMatrix)
numOfSamples <- nrow(scaledCsvDataMatrix)
print(paste(numOfNodes,numOfSamples)
isSelected <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isCurrentlyDiscarded <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isShortListed <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isOptimal <- matrix( c(0), nrow = 1, ncol = numOfNodes )
inducedDegree <- matrix( c(1), nrow = 1, ncol = numOfNodes )
rank <- matrix( c(0), nrow = 1, ncol = numOfNodes )
clusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
oldClusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
optimalDensity <- currentDensity
clusterLoop <- 0
optimalNodeCount <- 0
print(paste("Optimal Density = ", optimalDensity))
while(1){
nodeCount <- 0
for(i in 1:numOfNodes){
if(isSelected[i]==0){
nodeCount <- nodeCount + 1
}
rank[i] <- 9999
}
if(nodeCount==0 || nodeCount <= K){
break
}
# for(i in 1:numOfNodes){
#  if (isSelected[i] == 0){
#   inducedDegree[i] <- computeInducedDegree (NMIDataMatrix, isSelected, i)
#  }else{
#    inducedDegree[i] <- 0
#  }
#}
numInducedNodes <- 1
sumDegreeWeights <- 0
for(i in 1:numOfNodes){
if (isSelected[i] == 0){
sumDegreeWeights <- 0
for(j in 1:numOfNodes){
if(isSelected[j] == 0 && i!=j && NMIDataMatrix[i,j]<=1.00){
sumDegreeWeights <- sumDegreeWeights + NMIDataMatrix[i,j]
numInducedNodes <- numInducedNodes+1
print(paste("sum degree weights = ", sumDegreeWeights))
}
}
inducedDegree[i] <- sumDegreeWeights
}else{
print(0)
inducedDegree[i] <- 0
}
}
noShortListed <- 0
for(i in 1:numOfNodes){
if(isSelected[i] == 0){
if(inducedDegree[i] >= 2*optimalDensity){
isShortListed[i] <- 1
noShortListed <- noShortListed + 1
}else{
isShortListed[i] <- 0
}
}else{
isShortListed[i] <-0
}
}
if(noShortListed > 0){
print(paste("There is ",noShortListed," shortlisted Candidates " ))
}
rankLimit <- 1
print(paste("The rank Limit is %d ", rankLimit))
if(rankLimit > noShortListed){
rankLimit <- 0.5*noShortListed
}
if(noShortListed == 1){
rankLimit <- 1
}else if(noShortListed == 0){
break
}
rank <- computeRanking(inducedDegree, isShortListed, numOfNodes)
for(i in 1:numOfNodes){
isCurrentlyDiscarded[i] <- 0
if(isShortListed[i] == 1){
print("Short Listed")
if(rank[i] < rankLimit){
print(paste("Second rankLimit is ", rankLimit))
isSelected[i] <- 1
isCurrentlyDiscarded[i] <- 1
}
}
}
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
print(paste("Current Density is ", currentDensity))
for(i in 1:numOfNodes){
if(isSelected[i] == 1 && isCurrentlyDiscarded[i] == 0){
noNodes <- 0
sumWeight <- 0
isSelected[i] <- 0
for(j in 1:numOfNodes){
if(isSelected[j]==0 && j!=i && (NMIDataMatrix[i,j]<=1.00)){
noNodes <- noNodes + 1
sumWeight <- sumWeight + NMIDataMatrix[i,j]
}
}
density <- (currentDensity*noNodes+sumWeight)/(noNodes+1)
if(density < currentDensity){
print(paste("One node with id ",i+1," is being read"))
currentDensity <- density
}else{
isSelected[i] <- 1
}
}
}
if(currentDensity <= optimalDensity){
optimalDensity <- currentDensity
optimalNodeCount <- 0
for(i in 1:numOfNodes){
if(isOptimal[i] == 1){
optimalNodeCount <- optimalNodeCount + 1
print(i+1)
}
}
print("\n")
}
print(paste("\nOptimal Node Count is ", optimalNodeCount))
print(paste("\nOptimal Density is ", optimalDensity))
if(optimalNodeCount==K)
break
}
K <- 6 #need to know what this means
numOfNodes <- ncol(scaledCsvDataMatrix)
numOfSamples <- nrow(scaledCsvDataMatrix)
print(paste(numOfNodes,numOfSamples))
isSelected <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isCurrentlyDiscarded <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isShortListed <- matrix( c(0), nrow = 1, ncol = numOfNodes )
isOptimal <- matrix( c(0), nrow = 1, ncol = numOfNodes )
inducedDegree <- matrix( c(1), nrow = 1, ncol = numOfNodes )
rank <- matrix( c(0), nrow = 1, ncol = numOfNodes )
clusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
oldClusterIndex <- matrix( c(0), nrow = 1, ncol = numOfNodes )
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
optimalDensity <- currentDensity
clusterLoop <- 0
optimalNodeCount <- 0
print(paste("Optimal Density = ", optimalDensity))
while(1){
nodeCount <- 0
for(i in 1:numOfNodes){
if(isSelected[i]==0){
nodeCount <- nodeCount + 1
}
rank[i] <- 9999
}
if(nodeCount==0 || nodeCount <= K){
break
}
# for(i in 1:numOfNodes){
#  if (isSelected[i] == 0){
#   inducedDegree[i] <- computeInducedDegree (NMIDataMatrix, isSelected, i)
#  }else{
#    inducedDegree[i] <- 0
#  }
#}
numInducedNodes <- 1
sumDegreeWeights <- 0
for(i in 1:numOfNodes){
if (isSelected[i] == 0){
sumDegreeWeights <- 0
for(j in 1:numOfNodes){
if(isSelected[j] == 0 && i!=j && NMIDataMatrix[i,j]<=1.00){
sumDegreeWeights <- sumDegreeWeights + NMIDataMatrix[i,j]
numInducedNodes <- numInducedNodes+1
print(paste("sum degree weights = ", sumDegreeWeights))
}
}
inducedDegree[i] <- sumDegreeWeights
}else{
print(0)
inducedDegree[i] <- 0
}
}
noShortListed <- 0
for(i in 1:numOfNodes){
if(isSelected[i] == 0){
if(inducedDegree[i] >= 2*optimalDensity){
isShortListed[i] <- 1
noShortListed <- noShortListed + 1
}else{
isShortListed[i] <- 0
}
}else{
isShortListed[i] <-0
}
}
if(noShortListed > 0){
print(paste("There is ",noShortListed," shortlisted Candidates " ))
}
rankLimit <- 1
print(paste("The rank Limit is %d ", rankLimit))
if(rankLimit > noShortListed){
rankLimit <- 0.5*noShortListed
}
if(noShortListed == 1){
rankLimit <- 1
}else if(noShortListed == 0){
break
}
rank <- computeRanking(inducedDegree, isShortListed, numOfNodes)
for(i in 1:numOfNodes){
isCurrentlyDiscarded[i] <- 0
if(isShortListed[i] == 1){
print("Short Listed")
if(rank[i] < rankLimit){
print(paste("Second rankLimit is ", rankLimit))
isSelected[i] <- 1
isCurrentlyDiscarded[i] <- 1
}
}
}
currentDensity <- computeDensity(NMIDataMatrix, isSelected)
print(paste("Current Density is ", currentDensity))
for(i in 1:numOfNodes){
if(isSelected[i] == 1 && isCurrentlyDiscarded[i] == 0){
noNodes <- 0
sumWeight <- 0
isSelected[i] <- 0
for(j in 1:numOfNodes){
if(isSelected[j]==0 && j!=i && (NMIDataMatrix[i,j]<=1.00)){
noNodes <- noNodes + 1
sumWeight <- sumWeight + NMIDataMatrix[i,j]
}
}
density <- (currentDensity*noNodes+sumWeight)/(noNodes+1)
if(density < currentDensity){
print(paste("One node with id ",i+1," is being read"))
currentDensity <- density
}else{
isSelected[i] <- 1
}
}
}
if(currentDensity <= optimalDensity){
optimalDensity <- currentDensity
optimalNodeCount <- 0
for(i in 1:numOfNodes){
if(isOptimal[i] == 1){
optimalNodeCount <- optimalNodeCount + 1
print(i+1)
}
}
print("\n")
}
print(paste("\nOptimal Node Count is ", optimalNodeCount))
print(paste("\nOptimal Density is ", optimalDensity))
if(optimalNodeCount==K)
break
}
