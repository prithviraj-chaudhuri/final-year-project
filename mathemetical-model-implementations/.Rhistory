rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 51, ncol = 51, byrow = TRUE )
rownames(adj_egonet) <- seq(0:50)
colnames(adj_egonet) <- seq(0:50)
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[egonet_table[i,"user_id"],egonet_table[i,"neighbour"]] <- 1
if(i==50) break
}
View(adj_egonet)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 51, ncol = 51, byrow = TRUE )
rownames(adj_egonet) <- seq(0:50)
colnames(adj_egonet) <- seq(0:50)
View(adj_egonet)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 50, ncol = 50, byrow = TRUE )
rownames(adj_egonet) <- seq(0:50)
colnames(adj_egonet) <- seq(0:50)
adj_egonet <- matrix(rep(0), nrow = 51, ncol = 51, byrow = TRUE )
rownames(adj_egonet) <- seq(0:50)
colnames(adj_egonet) <- seq(0:50)
View(adj_egonet)
View(adj_egonet)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 50, ncol = 50, byrow = TRUE )
rownames(adj_egonet) <- seq(0:49)
colnames(adj_egonet) <- seq(0:49)
View(adj_egonet)
View(adj_egonet)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 51, ncol = 51, byrow = TRUE )
rownames(adj_egonet) <- seq(-1:49)
colnames(adj_egonet) <- seq(-1:49)
View(adj_egonet)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 50, ncol = 50, byrow = TRUE )
rownames(adj_egonet) <- seq(1:50)
colnames(adj_egonet) <- seq(1:50)
View(adj_egonet)
View(adj_egonet)
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[egonet_table[i,"user_id"]-1,egonet_table[i,"neighbour"]-1] <- 1
if(i==50) break
}
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 50, ncol = 50, byrow = TRUE )
rownames(adj_egonet) <- seq(1:50)
colnames(adj_egonet) <- seq(1:50)
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[egonet_table[i,"user_id"]+1,egonet_table[i,"neighbour"]+1] <- 1
if(i==50) break
}
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])+1] <- 1
if(i==50) break
}
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==50) break
}
View(adj_egonet)
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 200, ncol = 200, byrow = TRUE )
rownames(adj_egonet) <- seq(1:200)
colnames(adj_egonet) <- seq(1:200)
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==200) break
}
View(adj_egonet)
View(egonet_table)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 500, ncol = 500, byrow = TRUE )
rownames(adj_egonet) <- seq(1:500)
colnames(adj_egonet) <- seq(1:500)
#iterating through all the rows n the table
for (i in 1:nrow(egonet_table))
{
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==500) break
}
View(adj_egonet)
write.matrix(adj_egonet, file = "files/adj-matrix.txt", sep = ",")
write.table(adj_egonet, file = "files/adj-matrix.txt", sep = ",", )
write.table(adj_egonet, file = "adj-matrix.txt", sep = ",", )
write.matrix(adj_egonet, file = "adj-matrix.txt", sep = ",", blocksize)
write.table(adj_egonet, file = "adj-matrix.txt", sep = ",", blocksize)
write.table(adj_egonet, file = "adj-matrix.txt", sep = ",")
write.table(adj_egonet, file = "adj-matrix.txt", sep = "," , row.names=TRUE, col.names=FALSE)
rm(adj_egonet)
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
per_adj_mat <- 500
num_adj_mat <- nrow(egonet_table)/per_adj_mat
for (k in 1:num_adj_mat ){
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 500, ncol = nrow(egonet_table), byrow = TRUE )
rownames(adj_egonet) <- seq(k:500)
colnames(adj_egonet) <- seq(k:500)
#iterating through all the rows n the table
for (i in k:nrow(egonet_table)){
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==k) break
}
#writing the adjacency matrix in a file
write.table(adj_egonet, file = "adj-matrix.txt", sep = "," , row.names=TRUE, col.names=FALSE , append=TRUE)
#removing temp adjacency matrix
rm(adj_egonet)
}
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
per_adj_mat <- 500
num_adj_mat <- nrow(egonet_table)/per_adj_mat
for (k in 1:num_adj_mat ){
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 500, ncol = nrow(egonet_table), byrow = TRUE )
rownames(adj_egonet) <- seq(k:500+k)
colnames(adj_egonet) <- seq(k:500+k)
#iterating through all the rows n the table
for (i in k:nrow(egonet_table)){
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==k) break
}
#writing the adjacency matrix in a file
write.table(adj_egonet, file = "adj-matrix.txt", sep = "," , row.names=TRUE, col.names=FALSE , append=TRUE)
#removing temp adjacency matrix
rm(adj_egonet)
}
seq(1:10)
seq(2:10)
seq(1:12)
seq(1:9)
seq(9:9)
seq(9:0)
seq(9:40)
seq(50:40)
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = 500, ncol = nrow(egonet_table), byrow = TRUE )
colnames(adj_egonet) <- seq(1:nrow(egonet_table))
View(adj_egonet)
adj_egonet <- matrix(rep(0), nrow = 10, ncol = nrow(egonet_table), byrow = TRUE )
View(adj_egonet)
ncol(egonet_table)
nrow(egonet_table)
adj_egonet <- matrix(rep(0), nrow = 10, ncol = nrow(egonet_table), byrow = TRUE )
View(adj_egonet)
colnames(adj_egonet) <- seq(1:nrow(egonet_table))
View(adj_egonet)
write.table(adj_egonet, file = "adj-matrix.txt", sep = "," , row.names=TRUE, col.names=FALSE , append=TRUE)
seq(10, 50)
for (k in 1:num_adj_mat ){
rownames(adj_egonet) <- seq(k,k+500)
#iterating through all the rows n the table
for (i in k:nrow(egonet_table)){
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==k) break
}
#writing the adjacency matrix in a file
write.table(adj_egonet, file = "adj-matrix.csv", sep = "|" , row.names=TRUE, col.names=FALSE , append=TRUE)
#removing temp adjacency matrix
rm(adj_egonet)
}
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
per_adj_mat <- 500
num_adj_mat <- nrow(egonet_table)/per_adj_mat
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = per_adj_mat, ncol = nrow(egonet_table), byrow = TRUE )
colnames(adj_egonet) <- seq(1:nrow(egonet_table))
for (k in 1:num_adj_mat ){
rownames(as.numeric(adj_egonet)) <- seq(k,k+500)
#iterating through all the rows n the table
for (i in k:nrow(egonet_table)){
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==k) break
}
#writing the adjacency matrix in a file
write.table(adj_egonet, file = "adj-matrix.csv", sep = "|" , row.names=TRUE, col.names=FALSE , append=TRUE)
#removing temp adjacency matrix
rm(adj_egonet)
}
seq(10, 50)
write.table(adj_egonet, file = "adj-matrix.csv", sep = "|" , row.names=TRUE, col.names=FALSE)
require(gdata)
require(stringr)
#setting the memory limit to 1GB
memory.limit(size=102400)
#loading all data in 2D matrix
rows <- readLines("../facebook/facebook_combined.txt")
egonet_table <- cbind(user_id = trim(substr(rows, 0, gregexpr(pattern ='\\s', rows))),  neighbour = trim(substr(rows, gregexpr(pattern ='\\s', rows), nchar(rows))))
#removing variable
rm(rows)
per_adj_mat <- 500
num_adj_mat <- nrow(egonet_table)/per_adj_mat
#adjacency matrix
adj_egonet <- matrix(rep(0), nrow = per_adj_mat, ncol = nrow(egonet_table), byrow = TRUE )
colnames(adj_egonet) <- seq(1:nrow(egonet_table))
write.table(adj_egonet, file = "adj-matrix.csv", sep = "|" , row.names=TRUE, col.names=FALSE)
for (k in 1:num_adj_mat ){
rownames(as.numeric(adj_egonet)) <- seq(k,k+500)
#iterating through all the rows n the table
for (i in k:nrow(egonet_table)){
adj_egonet[as.numeric(egonet_table[i,"user_id"])+1,as.numeric(egonet_table[i,"neighbour"])] <- 1
if(i==k) break
}
#writing the adjacency matrix in a file
write.table(adj_egonet, file = "adj-matrix.csv", sep = "|" , row.names=TRUE, col.names=FALSE , append=TRUE)
#removing temp adjacency matrix
rm(adj_egonet)
}
print(hbjhb)
print("hbjhb")
#Function to read NMIData
readNMIData <- function(NMIfilename){
print(NMIfilename)
}
readNMIData("name")
#Function to read NMIData
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name = readNMIData(NMIfilename)
print(name)
#Function to read NMIData
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name <- readNMIData(NMIfilename)
Print(name)
#Function to read NMIData
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name <- readNMIData(NMIfilename)
name
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
var name <- readNMIData(NMIfilename)
echo name
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name <- readNMIData("NMIfilename")
echo name
#Function to read NMIData
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name <- readNMIData("NMIfilename")
printn(name)
#Function to read NMIData
readNMIData <- function(NMIfilename){
return(NMIfilename)
}
name <- readNMIData("NMIfilename")
print(name)
#Function to read NMIData
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
NMIData <- readData("C:\Users\prithviraj\Desktop\final-year-project\facebook\o.feat", FALSE)
CSVData <- readData("C:\Users\prithviraj\Desktop\final-year-project\facebook\facebook_combined.txt", TRUE)
#Function to read NMIData
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
NMIData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\o.feat", FALSE)
CSVData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\facebook_combined.txt", TRUE)
View(CSVData)
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
NMIData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\0.feat", FALSE)
CSVData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\facebook_combined.txt", TRUE)
View(NMIData)
View(adj_egonet)
#Function to read NMIData
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
NMIData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\0.feat", FALSE)
CSVData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\facebook_combined.txt", TRUE)
#Function to read Data
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
#
NMIData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\0.feat", FALSE)
CSVData <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\facebook_combined.txt", TRUE)
View(NMIData)
numOfNodes <- ncol(NMIData)-1
#Function to read Data
readData <- function(NMIfilename, isHeader){
data <- read.table(NMIfilename, header=isHeader)
return(data)
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix <- [i*numOfNodes+j] = ((csvDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#Exectution of the code
#reading the data
NMIDataMatrix <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\0.feat", FALSE)
CSVDataMatrix <- readData("C:\\Users\\prithviraj\\Desktop\\final-year-project\\facebook\\facebook_combined.txt", TRUE)
#setting number of nodes || features
numOfNodes <- ncol(NMIData)-1
numOfSamples <- 5673
#scaled csv data matrix
scaledCsvDataMatrix <- scaling(CSVDataMatrix, numOfNodes, numOfSamples)
scaledCsvDataMatrix <- scaleing(CSVDataMatrix, numOfNodes, numOfSamples)
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix <- [i*numOfNodes+j] = ((csvDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix <- [i*numOfNodes+j] = ((csvDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((csvDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
scaledCsvDataMatrix <- scaleing(CSVDataMatrix, numOfNodes, numOfSamples)
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((CSVDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
scaledCsvDataMatrix <- scaleing(CSVDataMatrix, numOfNodes, numOfSamples)
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((CSVDataMatrix[i*numOfNodes+j]-minVal,1)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((CSVDataMatrix[i*numOfNodes+j]-minVal,2)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((CSVDataMatrix[i*numOfNodes+j]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
#function to scale the CSV Data
scaleing <- function(CSVDataMatrix, numOfNodes, numOfSamples){
minScaledVal = 0;
maxScaledVal = 1;
minVal = 0;
maxVal = 0;
scaledCsvDataMatrix = 0;
for(j in 0:numOfNodes){
minVal = CSVDataMatrix[j]
maxVal = CSVDataMatrix[j]
for(i in 0:numOfSamples){
scaledCsvDataMatrix[i*numOfNodes+j] <- ((CSVDataMatrix[i*numOfNodes+j,0]-minVal)/(maxVal-minVal))*(maxScaledVal-minScaledVal)+minScaledVal;
}
}
return(scaledCsvDataMatrix);
}
scaledCsvDataMatrix <- scaleing(CSVDataMatrix, numOfNodes, numOfSamples)
